/*
  MODULE: Define API operation object module
  ------------------------------------------
  This module contains methods to define an Data API operation object.
*/
static int
compare_field_in_op(const void *a, const void *b)
{
  guint32 left_field_id= ((IC_FIELD_IN_OP*)a)->field_id;
  guint32 right_field_id= ((IC_FIELD_IN_OP*)b)->field_id;
  if (left_field_id > right_field_id)
    return +1;
  else if (left_field_id < right_field_id)
    return -1;
  return 0;
}

static int
organize_field_in_op_array(IC_INT_APID_OPERATION *apid_op,
                           IC_INT_TABLE_DEF *table_def)
{
  guint32 num_fields= apid_op->num_fields;
  guint32 field_id_compare= IC_MAX_UINT32;
  guint32 num_key_fields= table_def->num_key_fields;
  guint32 i, j, field_id, key_field_id, key_fields;

  qsort(apid_op->fields,
        num_fields,
        sizeof(IC_FIELD_IN_OP*),
        compare_field_in_op);
  for (i= 0; i < num_fields; i++)
  {
    field_id= apid_op->fields[i]->field_id;
    if (field_id_compare == field_id)
      return IC_ERROR_DUPLICATE_FIELD_IDS;
    field_id_compare= field_id;
    if (ic_is_bitmap_set(table_def->key_fields,field_id))
    {
      key_field_id= IC_MAX_UINT32;
      for (j= 0; j < num_key_fields; j++)
      {
        if (table_def->key_field_id_order[j] == field_id)
          key_field_id= j;
      }
      ic_require(key_field_id < num_key_fields);
      apid_op->key_fields[key_field_id]= apid_op->fields[i];
      key_fields++;
    }
  }
  if (key_fields == num_key_fields)
  {
    apid_op->is_all_key_fields_defined= TRUE;
    apid_op->num_key_fields= num_key_fields;
  }
  return 0;
}

static int
apid_op_define_field(IC_APID_OPERATION *ext_apid_op,
                     guint32 field_id,
                     guint32 buffer_offset,
                     guint32 null_offset)
{
  IC_FIELD_DEF *field_def;
  IC_FIELD_IN_OP *field_in_op;
  IC_INT_APID_OPERATION *apid_op= (IC_INT_APID_OPERATION*)ext_apid_op;
  IC_INT_TABLE_DEF *table_def;
  guint32 num_fields_defined= apid_op->num_fields_defined;
  int ret_code;

  table_def= (IC_INT_TABLE_DEF*)apid_op->table_def;
  if (field_id > table_def->num_fields ||
      num_fields_defined >= apid_op->num_fields)
    return IC_ERROR_TOO_MANY_FIELDS;
  field_def= table_def->fields[field_id];
  field_in_op= apid_op->fields[num_fields_defined];
  num_fields_defined++;
  apid_op->num_fields_defined= num_fields_defined;
  if (!apid_op->is_buffer_allocated_by_api)
  {
    field_in_op->data_offset=  buffer_offset;
    field_in_op->null_offset= null_offset;
  }
  field_in_op->field_id= field_id;
  if (num_fields_defined == apid_op->num_fields)
  {
    /* Last field defined, organise fields data */
    if ((ret_code= organize_field_in_op_array(apid_op, table_def)))
      return ret_code;
  }
  return 0;
}

static int
apid_op_define_pos(IC_APID_OPERATION *apid_op,
                   guint32 field_id,
                   gchar *field_data,
                   gboolean use_full_field,
                   guint32 start_pos,
                   guint32 end_pos)
{
  (void)apid_op;
  (void)field_id;
  (void)field_data;
  (void)use_full_field;
  (void)start_pos;
  (void)end_pos;
  return 0;
}

static int
apid_op_transfer_ownership(IC_APID_OPERATION *apid_op,
                           guint32 field_id)
{
  (void)apid_op;
  (void)field_id;
  return 0;
}

static int
apid_op_set_partition_ids(IC_APID_OPERATION *apid_op,
                          IC_BITMAP *used_partitions)
{
  (void)apid_op;
  (void)used_partitions;
  return 0;
}

static int
apid_op_set_partition_id(IC_APID_OPERATION *apid_op,
                         guint32 partition_id)
{
  (void)apid_op;
  (void)partition_id;
  return 0;
}

static IC_RANGE_CONDITION*
apid_op_create_range_condition(IC_APID_OPERATION *apid_op)
{
  (void)apid_op;
  return 0;
}

static void
apid_op_keep_range(IC_APID_OPERATION *apid_op)
{
  (void)apid_op;
}

static IC_WHERE_CONDITION*
apid_op_create_where_condition(IC_APID_OPERATION *apid_op)
{
  (void)apid_op;
  return NULL;
}

static int
apid_op_map_where_condition(IC_APID_OPERATION *apid_op,
                            IC_APID_GLOBAL *apid_global,
                            guint32 where_cond_id)
{
  (void)apid_op;
  (void)apid_global;
  (void)where_cond_id;
  return 0;
}

static void
apid_op_keep_where(IC_APID_OPERATION *apid_op)
{
  (void)apid_op;
}

static IC_CONDITIONAL_ASSIGNMENT**
apid_op_create_conditional_assignments(IC_APID_OPERATION *apid_op,
                                       guint32 num_cond_assigns)
{
  (void)apid_op;
  (void)num_cond_assigns;
  return NULL;
}

static IC_CONDITIONAL_ASSIGNMENT*
apid_op_create_conditional_assignment(IC_APID_OPERATION *apid_op,
                                      guint32 cond_assign_id)
{
  (void)apid_op;
  (void)cond_assign_id;
  return NULL;
}

static int
apid_op_map_conditional_assignment(IC_APID_OPERATION *apid_op,
                                   IC_APID_GLOBAL *apid_global,
                                   guint32 loc_cond_assign_id,
                                   guint32 glob_cond_assign_id)
{
  (void)apid_op;
  (void)apid_global;
  (void)loc_cond_assign_id;
  (void)glob_cond_assign_id;
  return 0;
}

static void
apid_op_keep_conditional_assignment(IC_APID_OPERATION *apid_op)
{
  (void)apid_op;
}

static IC_APID_ERROR*
apid_op_get_error_object(IC_APID_OPERATION *apid_op)
{
  (void)apid_op;
  return NULL;
}

static int
apid_op_reset(IC_APID_OPERATION *apid_op)
{
  (void)apid_op;
  return 0;
}

static void
apid_op_free(IC_APID_OPERATION *apid_op)
{
  if (apid_op)
    ic_free(apid_op);
}

static IC_APID_OPERATION_OPS glob_apid_ops =
{
  /* .ic_define_field            = */ apid_op_define_field,
  /* .ic_define_pos              = */ apid_op_define_pos,
  /* .ic_transfer_ownership      = */ apid_op_transfer_ownership,
  /* .ic_set_partition_id        = */ apid_op_set_partition_id,
  /* .ic_set_partition_ids       = */ apid_op_set_partition_ids,
  /* .ic_create_range_condition  = */ apid_op_create_range_condition,
  /* .ic_keep_range              = */ apid_op_keep_range,
  /* .ic_create_where_condition  = */ apid_op_create_where_condition,
  /* .ic_map_where_condition     = */ apid_op_map_where_condition,
  /* .ic_keep_where              = */ apid_op_keep_where,
  /* .ic_create_conditional_assignments = */ apid_op_create_conditional_assignments,
  /* .ic_create_conditional_assignment = */ apid_op_create_conditional_assignment,
  /* .ic_map_conditional_assignment = */ apid_op_map_conditional_assignment,
  /* .ic_keep_conditional_assignment = */ apid_op_keep_conditional_assignment,
  /* .ic_get_error_object        = */ apid_op_get_error_object,
  /* .ic_reset_apid_op           = */ apid_op_reset,
  /* .ic_free_apid_op            = */ apid_op_free
};

static void
set_up_fields_in_apid_op(IC_INT_APID_OPERATION *apid_op,
                         IC_INT_TABLE_DEF *table_def)
{
  guint32 i;
  int ret_code;
  for (i= 0; i < table_def->num_fields; i++)
  {
    ret_code= apid_op_define_field((IC_APID_OPERATION*)apid_op, i, 0, 0);
    ic_require(!ret_code);
  }
}

IC_APID_OPERATION*
ic_create_apid_operation(IC_APID_GLOBAL *apid_global,
                         IC_TABLE_DEF *ext_table_def,
                         guint32 num_fields,
                         gboolean is_buffer_allocated_by_api,
                         gchar *data_buffer,
                         guint32 data_buffer_size,
                         guint8 *null_buffer,
                         guint32 null_buffer_size,
                         int *error)
{
  IC_INT_APID_OPERATION *apid_op;
  IC_INT_TABLE_DEF *table_def= (IC_INT_TABLE_DEF*)ext_table_def;
  gchar *loc_alloc;
  guint32 tot_size;
  guint32 i;
  guint32 num_key_fields= 0;

  if (!error)
    return NULL;
  if (num_fields > table_def->num_fields)
  {
    *error= IC_ERROR_TOO_MANY_FIELDS;
    return NULL;
  }
  if (!(data_buffer && null_buffer))
  {
    *error= IC_ERROR_BUFFER_MISSING_CREATE_APID_OP;
    return NULL;
  }

  if (!table_def->is_index || table_def->is_unique_index)
  {
    /*
      Allocate an area for key fields to make Key Read/Writes more efficient.
      Not necessary when using a non-unique index. Also not needed when
      number of fields is smaller than number of key fields obviously.
    */
    if (num_fields >= table_def->num_key_fields)
      num_key_fields= table_def->num_key_fields;
  }
  if (!num_fields) /* Use all fields if num_fields == 0 */
    num_fields= table_def->num_fields;
  tot_size=
    sizeof(IC_INT_APID_OPERATION) +
    sizeof(IC_FIELD_IN_OP*) * num_key_fields +
    num_fields * (
      sizeof(IC_FIELD_IN_OP*) + sizeof(IC_FIELD_IN_OP));
  if ((loc_alloc= ic_calloc(tot_size)))
  {
    *error= IC_ERROR_MEM_ALLOC;
    return NULL;
  }
  apid_op= (IC_INT_APID_OPERATION*)loc_alloc;
  apid_op->fields= (IC_FIELD_IN_OP**)
    (loc_alloc + sizeof(IC_INT_APID_OPERATION));
  loc_alloc+= (num_fields * sizeof(IC_FIELD_IN_OP*));
  if (num_key_fields)
  {
    apid_op->key_fields= (IC_FIELD_IN_OP**)loc_alloc;
    loc_alloc+= (num_key_fields * sizeof(IC_FIELD_IN_OP*));
  }
  for (i= 0; i < num_fields; i++)
  {
    apid_op->fields[i]= (IC_FIELD_IN_OP*)loc_alloc;
    loc_alloc+= sizeof(IC_FIELD_IN_OP);
  }

  /*
    apid_conn set per query
    trans_obj set per query
    where_cond set per query if used in query
    range_cond set per query if used in query
    op_type set per query
    read_key_op, write_key_op, scan_op union set per query
    user_reference set per query
    next_trans_op, prev_trans_op used to keep doubly linked list
    of operation records in transaction.
    next_conn_op, prev_conn_op used to keep doubly linked list of
    operation records on connection object.
  */
  apid_op->apid_op_ops= &glob_apid_ops;
  apid_op->table_def= (IC_TABLE_DEF*)table_def;
  apid_op->buffer_ptr= data_buffer;
  apid_op->null_ptr= null_buffer;
  apid_op->buffer_size= data_buffer_size;
  apid_op->max_null_bits= null_buffer_size * 8;
  apid_op->apid_global= (IC_INT_APID_GLOBAL*)apid_global;
  apid_op->is_buffer_allocated_by_api= is_buffer_allocated_by_api;
  apid_op->num_fields= num_fields;
  apid_op->num_key_fields= num_key_fields;

  if (is_buffer_allocated_by_api &&
      table_def->num_fields == num_fields)
  {
    set_up_fields_in_apid_op(apid_op, table_def);
  }
  *error= 0;
  return (IC_APID_OPERATION*)apid_op;
}
