/* Copyright (C) 2009 iClaustron AB

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 of the License.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */

/*
  MODULE: Configuration reader client, Protocol Part
  --------------------------------------------------
  This module implements one of the methods in the IC_API_CONFIG_SERVER
  interface. It is the get_cs_config method.

  This method connects to one of the provided cluster servers. Then it
  retrieves the configuration from this cluster server. In a successful
  case we keep this connection so that it can be kept for other usage
  such that we can stay informed about changes of the configuration.
  The configuration is by default locked in the sense that the configuration
  cannot be changed until the connection is converted to a information
  channel where the requester of the configuration also is informed of
  any changes to the configuration in proper order.

  This module makes use of the other Configuration reader client module
  which translates the received base64 encoded string into a cluster
  configuration. In addition it makes heavy use of the Support module for
  NDB Management Protocol support.

  The method implemented is the:
  get_cs_config

  This method first calls the connect_api_connection to set-up the socket
  connections to the Cluster Server through help of the methods
  (disconnect_api_connection for error handling and used by other modules):
    connect_api_connection
    disconnect_api_connection
    set_up_server_connection

  After connection has been set-up the client asks for the cluster id
  information using the method:
  get_cluster_ids

  The final step is the actual protocol part to retrieve the configuration
  which are implemented by the protocol support methods:
    send_get_nodeid_req
    send_get_config_req
    rec_get_nodeid_reply
    rec_get_config_reply
  As part of the rec_get_config_reply method we call the translate_config
  method which is implemented in the other Configuration reader client
  module.
*/
static int get_cluster_ids(IC_INT_API_CONFIG_SERVER *apic,
                           IC_CLUSTER_CONNECT_INFO **clu_infos);
static int send_get_nodeid_req(IC_INT_API_CONFIG_SERVER *apic,
                               IC_CONNECTION *conn,
                               guint32 cluster_id);
static int send_get_config_req(IC_INT_API_CONFIG_SERVER *apic,
                               IC_CONNECTION *conn);
static int rec_get_config_reply(IC_INT_API_CONFIG_SERVER *apic,
                                IC_CONNECTION *conn,
                              guint32 cluster_id);
static int rec_get_nodeid_reply(IC_INT_API_CONFIG_SERVER *apic,
                                IC_CONNECTION *conn,
                                guint32 cluster_id);

static int connect_api_connections(IC_INT_API_CONFIG_SERVER *apic,
                                   IC_CONNECTION **conn_ptr);
static int set_up_cluster_server_connection(IC_INT_API_CONFIG_SERVER *apic,
                                            IC_CONNECTION **conn,
                                            gchar *server_name,
                                            gchar *server_port);
static guint64 get_iclaustron_protocol_version(gboolean use_iclaustron_cluster_server);
static guint32 count_clusters(IC_CLUSTER_CONNECT_INFO **clu_infos);

static void disconnect_api_connections(IC_INT_API_CONFIG_SERVER *apic);

static int
null_get_cs_config(IC_API_CONFIG_SERVER *ext_apic,
                   IC_CLUSTER_CONNECT_INFO **clu_infos,
                   guint32 node_id)
{
  (void)ext_apic;
  (void)clu_infos;
  (void)node_id;
  return IC_ERROR_GET_CONFIG_BY_CLUSTER_SERVER;
}

static int
get_cs_config(IC_API_CONFIG_SERVER *ext_apic,
              IC_CLUSTER_CONNECT_INFO **clu_infos,
              guint32 node_id)
{
  IC_INT_API_CONFIG_SERVER *apic= (IC_INT_API_CONFIG_SERVER*)ext_apic;
  guint32 i, max_cluster_id= 0;
  guint32 cluster_id, num_clusters;
  int error= IC_END_OF_FILE;
  IC_CONNECTION *conn= NULL;
  IC_CLUSTER_CONFIG *clu_conf;
  IC_MEMORY_CONTAINER *mc_ptr= apic->mc_ptr;
  DEBUG_ENTRY("get_cs_config");

  if (apic->use_ic_cs)
    num_clusters= count_clusters(clu_infos);
  else
    num_clusters= 1;
  if ((error= connect_api_connections(apic, &conn)))
    DEBUG_RETURN(error);
  if (apic->use_ic_cs)
  {
    if ((error= get_cluster_ids(apic, clu_infos)))
      DEBUG_RETURN(error);
    for (i= 0; i < num_clusters; i++)
      max_cluster_id= IC_MAX(max_cluster_id, clu_infos[i]->cluster_id);
    apic->max_cluster_id= max_cluster_id;
  }
  else
  {
    apic->max_cluster_id= max_cluster_id= 0;
  }
  if (!(apic->conf_objects= (IC_CLUSTER_CONFIG**)
        mc_ptr->mc_ops.ic_mc_calloc(mc_ptr,
           (max_cluster_id + 1) * sizeof(IC_CLUSTER_CONFIG**))) ||
      !(apic->temp->node_ids= (guint32*)
        mc_ptr->mc_ops.ic_mc_calloc(mc_ptr,
            sizeof(guint32) * (max_cluster_id + 1))))
    goto mem_alloc_error;

  for (i= 0; i < num_clusters; i++)
  {
    if (apic->use_ic_cs)
      cluster_id= clu_infos[i]->cluster_id;
    else
      cluster_id= 0;
    if (!(clu_conf= (IC_CLUSTER_CONFIG*)
        mc_ptr->mc_ops.ic_mc_calloc(mc_ptr, sizeof(IC_CLUSTER_CONFIG))))
      goto mem_alloc_error;
    if (ic_mc_strdup(mc_ptr, &clu_conf->clu_info.cluster_name,
                       &clu_infos[i]->cluster_name) ||
        ic_mc_strdup(mc_ptr, &clu_conf->clu_info.password,
                       &clu_infos[i]->password))
      goto mem_alloc_error;
    clu_conf->clu_info.cluster_id= cluster_id;
    if (apic->conf_objects[cluster_id])
    {
      error= IC_ERROR_CONFLICTING_CLUSTER_IDS;
      goto error;
    }
    apic->conf_objects[cluster_id]= clu_conf;
    apic->temp->node_ids[cluster_id]= node_id;
    clu_conf->my_node_id= node_id;
  }

  for (cluster_id= 0; cluster_id <= apic->max_cluster_id; cluster_id++)
  {
    if (!apic->conf_objects[cluster_id])
      continue;
    if ((error= send_get_nodeid_req(apic, conn, cluster_id)) ||
        (error= rec_get_nodeid_reply(apic, conn, cluster_id)) ||
        (error= send_get_config_req(apic, conn)) ||
        (error= rec_get_config_reply(apic, conn, cluster_id)))
      goto error;
  }
  for (cluster_id= 0; cluster_id <= apic->max_cluster_id; cluster_id++)
  {
    IC_CLUSTER_CONFIG *clu_conf= apic->conf_objects[cluster_id];
    if (clu_conf && build_hash_on_comms(clu_conf, NULL))
      goto mem_alloc_error;
  }
  apic->cluster_conn.current_conn= conn;
  DEBUG_RETURN(0);
mem_alloc_error:
  error= IC_ERROR_MEM_ALLOC;
error:
  DEBUG_PRINT(CONFIG_LEVEL, ("Error: %d\n", error));
  DEBUG_RETURN(error);
}

#define RECEIVE_CLUSTER_NAME 1
#define RECEIVE_CLUSTER_ID 2

static int
get_cluster_ids(IC_INT_API_CONFIG_SERVER *apic,
                IC_CLUSTER_CONNECT_INFO **clu_infos)
{
  gchar *read_buf;
  guint32 read_size;
  guint32 state, num_clusters_found= 0;
  guint32 num_clusters= 0;
  guint64 cluster_id;
  IC_CLUSTER_CONNECT_INFO *found_clu_info= NULL;
  IC_CLUSTER_CONNECT_INFO **clu_info_iter, *clu_info;
  int error;
  IC_CONNECTION *conn= apic->cluster_conn.current_conn;
  DEBUG_ENTRY("get_cluster_ids");

  num_clusters= count_clusters(clu_infos);
  if (ic_send_with_cr(conn, get_cluster_list_str))
  {
    error= conn->conn_op.ic_get_error_code(conn);
    goto error;
  }
  if ((error= ic_rec_simple_str(conn, get_cluster_list_reply_str)))
    PROTOCOL_CHECK_ERROR_GOTO(error);
  state= RECEIVE_CLUSTER_NAME;
  while (!(error= ic_rec_with_cr(conn, &read_buf, &read_size)))
  {
    if (!ic_check_buf(read_buf, read_size, end_get_cluster_list_str,
                      strlen(end_get_cluster_list_str)))
      break;
    switch (state)
    {
      case RECEIVE_CLUSTER_NAME:
        if ((read_size < CLUSTER_NAME_REQ_LEN) ||
            (memcmp(read_buf, cluster_name_string, CLUSTER_NAME_REQ_LEN) != 0))
        {
          DEBUG_PRINT(CONFIG_LEVEL,
            ("Protocol error in receive cluster name state"));
          PROTOCOL_CHECK_GOTO(FALSE);
        }
        found_clu_info= NULL;
        clu_info_iter= clu_infos;
        while (*clu_info_iter)
        {
          clu_info= *clu_info_iter;
          if ((clu_info->cluster_name.len ==
               (read_size - CLUSTER_NAME_REQ_LEN)) &&
              (memcmp(clu_info->cluster_name.str,
                      read_buf+CLUSTER_NAME_REQ_LEN,
                      clu_info->cluster_name.len) == 0))
          {
            found_clu_info= clu_info;
            break;
          }
          clu_info_iter++;
        }
        state= RECEIVE_CLUSTER_ID;
        break;
      case RECEIVE_CLUSTER_ID:
        if (ic_check_buf_with_int(read_buf, read_size, cluster_id_str,
                                  CLUSTER_ID_REQ_LEN, &cluster_id))
        {
          DEBUG_PRINT(CONFIG_LEVEL,
            ("Protocol error in receive cluster id state"));
          PROTOCOL_CHECK_GOTO(FALSE);
        }
        PROTOCOL_CHECK_GOTO(cluster_id <= IC_MAX_CLUSTER_ID);
        if (found_clu_info)
        {
          found_clu_info->cluster_id= cluster_id;
          num_clusters_found++;
        }
        state= RECEIVE_CLUSTER_NAME;
        break;
      default:
        g_assert(FALSE);
    }
  }
  error= 1;
  if (num_clusters_found != num_clusters)
    goto error;
  DEBUG_RETURN(0);
error:
  DEBUG_RETURN(error);
}

static int
send_get_nodeid_req(IC_INT_API_CONFIG_SERVER *apic,
                    IC_CONNECTION *conn,
                    guint32 cluster_id)
{
  gchar endian_buf[32];
  guint64 node_type= 1;
  guint64 version_no;
  guint32 node_id= apic->temp->node_ids[cluster_id];

  version_no= get_iclaustron_protocol_version(apic->use_ic_cs);
#if (G_BYTE_ORDER == G_LITTLE_ENDIAN)
  g_snprintf(endian_buf, 32, "%s%s", endian_str, little_endian_str);
#else
  g_snprintf(endian_buf, 32, "%s%s", endian_str, big_endian_str);
#endif
  if (ic_send_with_cr(conn, get_nodeid_str) ||
      ic_send_with_cr_with_num(conn, ic_version_str, version_no) ||
      ic_send_with_cr_with_num(conn, nodetype_str, node_type) ||
      ic_send_with_cr_with_num(conn, nodeid_str, (guint64)node_id) ||
      ic_send_with_cr(conn, user_str) ||
      ic_send_with_cr(conn, password_str) ||
      ic_send_with_cr(conn, public_key_str) ||
      ic_send_with_cr(conn, endian_buf) ||
      ic_send_with_cr(conn, log_event_str) ||
      (apic->use_ic_cs &&
      ic_send_with_cr_with_num(conn, cluster_id_str, (guint64)cluster_id)) ||
      ic_send_empty_line(conn))
    return conn->conn_op.ic_get_error_code(conn);
  return 0;
}

static int
send_get_config_req(IC_INT_API_CONFIG_SERVER *apic,
                    IC_CONNECTION *conn)
{
  guint64 version_no;
  guint64 node_type= 1;

  version_no= get_iclaustron_protocol_version(apic->use_ic_cs);
  if (ic_send_with_cr(conn, get_config_str) ||
      ic_send_with_cr_with_num(conn, ic_version_str, version_no) ||
      ic_send_with_cr_with_num(conn, nodetype_str, node_type) ||
      ic_send_empty_line(conn))
    return conn->conn_op.ic_get_error_code(conn);
  return 0;
}

static int
rec_get_nodeid_reply(IC_INT_API_CONFIG_SERVER *apic,
                     IC_CONNECTION *conn,
                     guint32 cluster_id)
{
  gchar *read_buf;
  guint32 read_size;
  int error;
  guint64 node_number;
  guint32 state= GET_NODEID_REPLY_STATE;

  while (!(error= ic_rec_with_cr(conn, &read_buf, &read_size)))
  {
    switch (state)
    {
      case GET_NODEID_REPLY_STATE:
        /*
          The protocol is decoded in the order of the case statements in
          the switch statements.
        
          Receive:
          get nodeid reply<CR>
        */
        if (ic_check_buf(read_buf, read_size, get_nodeid_reply_str,
                         GET_NODEID_REPLY_LEN))
        {
          DEBUG_PRINT(CONFIG_LEVEL,
            ("Protocol error in Get nodeid reply state"));
          PROTOCOL_CHECK_RETURN(FALSE);
        }
        state= NODEID_STATE;
        break;
      case NODEID_STATE:
        /*
          Receive:
          nodeid: __nodeid<CR>
          Where __nodeid is an integer giving the nodeid of the starting
          process
        */
        if (ic_check_buf_with_int(read_buf, read_size, nodeid_str, NODEID_LEN,
                                  &node_number) ||
            (node_number > IC_MAX_NODE_ID))
        {
          DEBUG_PRINT(CONFIG_LEVEL,
            ("Protocol error in nodeid state"));
          PROTOCOL_CHECK_RETURN(FALSE);
        }
        DEBUG_PRINT(CONFIG_LEVEL, ("Nodeid = %u", (guint32)node_number));
        apic->temp->node_ids[cluster_id]= (guint32)node_number;
        state= RESULT_OK_STATE;
        break;
      case RESULT_OK_STATE:
        /*
          Receive:
          result: Ok<CR>
        */
        if (ic_check_buf(read_buf, read_size, result_ok_str, RESULT_OK_LEN))
        {
          DEBUG_PRINT(CONFIG_LEVEL,
            ("Protocol error in result ok state"));
          PROTOCOL_CHECK_RETURN(FALSE);
        }
        state= WAIT_EMPTY_RETURN_STATE;
        break;
      case WAIT_EMPTY_RETURN_STATE:
        /*
          Receive:
          <CR>
        */
        if (read_size != 0)
        {
          DEBUG_PRINT(CONFIG_LEVEL,
            ("Protocol error in wait empty state"));
          PROTOCOL_CHECK_RETURN(FALSE);
        }
        return 0;
      case RESULT_ERROR_STATE:
        break;
      default:
        break;
    }
  }
  return error;
}

static int
rec_get_config_reply(IC_INT_API_CONFIG_SERVER *apic,
                     IC_CONNECTION *conn,
                     guint32 cluster_id)
{
  gchar *read_buf;
  guint32 read_size;
  gchar *config_buf= NULL;
  guint32 config_size= 0;
  guint32 rec_config_size= 0;
  int error= 0;
  guint64 content_length;
  guint32 state= GET_CONFIG_REPLY_STATE;

  while (!(error= ic_rec_with_cr(conn, &read_buf, &read_size)))
  {
    switch (state)
    {
      case GET_CONFIG_REPLY_STATE:
        /*
          The protocol is decoded in the order of the case statements in the
          switch statements.
 
          Receive:
          get config reply<CR>
        */
        if (ic_check_buf(read_buf, read_size, get_config_reply_str,
                         GET_CONFIG_REPLY_LEN))
        {
          DEBUG_PRINT(CONFIG_LEVEL,
            ("Protocol error in get config reply state"));
          PROTOCOL_CHECK_GOTO(FALSE);
        }
        state= RESULT_OK_STATE;
        break;
      case RESULT_OK_STATE:
        /*
          Receive:
          result: Ok<CR>
        */
        if (ic_check_buf(read_buf, read_size, result_ok_str, RESULT_OK_LEN))
        {
          DEBUG_PRINT(CONFIG_LEVEL,
            ("Protocol error in result ok state"));
          PROTOCOL_CHECK_GOTO(FALSE);
        }
        state= CONTENT_LENGTH_STATE;
        break;
      case CONTENT_LENGTH_STATE:
        /*
          Receive:
          Content-Length: __length<CR>
          Where __length is a decimal-coded number indicating length in bytes
        */
        if (ic_check_buf_with_int(read_buf, read_size, content_len_str,
                                  CONTENT_LENGTH_LEN, &content_length) ||
            (content_length > MAX_CONTENT_LEN))
        {
          DEBUG_PRINT(CONFIG_LEVEL,
            ("Protocol error in content length state"));
          PROTOCOL_CHECK_GOTO(FALSE);
        }
        state= OCTET_STREAM_STATE;
        break;
      case OCTET_STREAM_STATE:
        /*
          Receive:
          Content-Type: ndbconfig/octet-stream<CR>
        */
        if (ic_check_buf(read_buf, read_size, octet_stream_str,
                         OCTET_STREAM_LEN))
        {
          DEBUG_PRINT(CONFIG_LEVEL,
            ("Protocol error in octet stream state"));
          PROTOCOL_CHECK_GOTO(FALSE);
        }
        state= CONTENT_ENCODING_STATE;
        break;
      case CONTENT_ENCODING_STATE:
        /*
          Receive:
          Content-Transfer-Encoding: base64
        */
        if (ic_check_buf(read_buf, read_size, content_encoding_str,
                      CONTENT_ENCODING_LEN))
        {
          DEBUG_PRINT(CONFIG_LEVEL,
            ("Protocol error in content encoding state"));
          PROTOCOL_CHECK_GOTO(FALSE);
        }
        /*
          Here we need to allocate receive buffer for configuration plus the
          place to put the encoded binary data.
          This is a temporary memory allocation only for this method.
        */
        if (!(config_buf= ic_calloc(content_length)))
          return IC_ERROR_MEM_ALLOC;
        config_size= 0;
        rec_config_size= 0;
        state= WAIT_EMPTY_RETURN_STATE;
        break;
      case WAIT_EMPTY_RETURN_STATE:
        /*
          Receive:
          <CR>
        */
        if (read_size != 0)
        {
          DEBUG_PRINT(CONFIG_LEVEL,
            ("Protocol error in wait empty return state"));
          PROTOCOL_CHECK_GOTO(FALSE);
        }
        if (state == WAIT_EMPTY_RETURN_STATE)
          state= RECEIVE_CONFIG_STATE;
        else
          goto end;
        break;
      case RECEIVE_CONFIG_STATE:
        /*
          At this point we should now start receiving the configuration in
          base64 encoded format. It will arrive in 76 character chunks
          followed by a carriage return.
        */
        g_assert(config_buf);
        memcpy(config_buf+config_size, read_buf, read_size);
        config_size+= read_size;
        rec_config_size+= (read_size + 1);
        if (rec_config_size >= content_length)
        {
          /*
            This is the last line, we have now received the config
            and are ready to translate it.
          */
          DEBUG_PRINT(CONFIG_LEVEL, ("Start decoding"));
          error= translate_config(apic, cluster_id,
                                  config_buf, config_size);
          state= WAIT_LAST_EMPTY_RETURN_STATE;
        }
        else if (read_size != CONFIG_LINE_LEN)
        {
          DEBUG_PRINT(CONFIG_LEVEL,
            ("Protocol error in config receive state"));
          PROTOCOL_CHECK_GOTO(FALSE);
        }
        break;
      case RESULT_ERROR_STATE:
        break;
      default:
        break;
    }
  }
error:
end:
  if (config_buf)
    ic_free(config_buf);
  return error;
}

static int
connect_api_connections(IC_INT_API_CONFIG_SERVER *apic,
                        IC_CONNECTION **conn_ptr)
{
  guint32 i;
  int error= 1;
  IC_CONNECTION **conn_p;

  for (i= 0; i < apic->cluster_conn.num_cluster_servers; i++)
  {
    conn_p= (IC_CONNECTION**)(&apic->cluster_conn.cluster_srv_conns[i]);
    if (!(error= set_up_cluster_server_connection(apic, conn_p,
                  apic->cluster_conn.cluster_server_ips[i],
                  apic->cluster_conn.cluster_server_ports[i])))
    {
      *conn_ptr= *conn_p;
      apic->cluster_conn.current_conn= *conn_p;
      return 0;
    }
  }
  return error;
}

static void
disconnect_api_connections(IC_INT_API_CONFIG_SERVER *apic)
{
  guint32 i;
  IC_CONNECTION *conn;

  for (i= 0; i < apic->cluster_conn.num_cluster_servers; i++)
  {
    conn= apic->cluster_conn.cluster_srv_conns[i];
    conn->conn_op.ic_free_connection(conn);
  }
}

static int
set_up_cluster_server_connection(IC_INT_API_CONFIG_SERVER *apic,
                                 IC_CONNECTION **conn,
                                 gchar *server_name,
                                 gchar *server_port)
{
  int error;
  IC_CONNECTION *loc_conn;

  if (!(*conn= ic_create_socket_object(TRUE, FALSE, FALSE,
                                       CONFIG_READ_BUF_SIZE,
                                       NULL, NULL)))
    return IC_ERROR_MEM_ALLOC;
  loc_conn= *conn;
  loc_conn->conn_op.ic_prepare_server_connection(loc_conn,
                                                 server_name,
                                                 server_port,
                                                 NULL,
                                                 NULL,
                                                 0,
                                                 FALSE);
  if ((error= loc_conn->conn_op.ic_set_up_connection(loc_conn, NULL, NULL)))
  {
    DEBUG_PRINT(COMM_LEVEL, ("Connect failed with error %d", error));
    apic->err_str= loc_conn->conn_op.ic_get_error_str(loc_conn);
    return error;
  }
  DEBUG_PRINT(COMM_LEVEL,
              ("Successfully set-up connection to cluster server"));
  return 0;
}

static guint64
get_iclaustron_protocol_version(gboolean use_iclaustron_cluster_server)
{
  guint64 version_no= NDB_VERSION;
  if (use_iclaustron_cluster_server)
  {
    version_no+= (IC_VERSION << IC_VERSION_BIT_START);
    ic_set_bit(version_no, IC_PROTOCOL_BIT);
  }
  return version_no;
}

static guint32
count_clusters(IC_CLUSTER_CONNECT_INFO **clu_infos)
{
  IC_CLUSTER_CONNECT_INFO **clu_info_iter;
  guint32 num_clusters= 0;
  clu_info_iter= clu_infos;
  while (*clu_info_iter)
  {
    num_clusters++;
    clu_info_iter++;
  }
  return num_clusters;
}
