/* Copyright (C) 2009 iClaustron AB

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 of the License.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */

/*
  MODULE: Table definition interface
  ----------------------------------
  This module implements the IC_TABLE_DEF interface which is used to fetch
  metadata about a table, its indexes and its fields.
*/

static int
table_def_get_table_id(IC_TABLE_DEF *table_def,
                       guint32 *table_id)
{
  (void)table_def;
  (void)table_id;
  return 0;
}

static int
table_def_get_field_id(IC_TABLE_DEF *table_def,
                       const gchar *field_name,
                       guint32 *field_id)
{
  (void)table_def;
  (void)field_name;
  (void)field_id;
  return 0;
}

static int
table_def_get_field_name(IC_TABLE_DEF *table_def,
                         guint32 field_id,
                         gchar **field_name)
{
  (void)table_def;
  (void)field_id;
  (void)field_name;
  return 0;
}

static int
table_def_get_field_type(IC_TABLE_DEF *table_def,
                         guint32 field_id,
                         IC_FIELD_TYPE *field_data_type)
{
  (void)table_def;
  (void)field_id;
  (void)field_data_type;
  return 0;
}

static int
table_def_get_field_len(IC_TABLE_DEF *table_def,
                        guint32 field_id,
                        guint32 *field_len)
{
  (void)table_def;
  (void)field_id;
  (void)field_len;
  return 0;
}

static int
table_def_get_buf(IC_TABLE_DEF *table_def,
                  IC_BITMAP *used_fields,
                  gchar **data_buffer,
                  guint8 **null_buffer,
                  guint32 *data_buffer_size,
                  guint32 *null_buffer_size)
{
  (void)table_def;
  (void)used_fields;
  (void)data_buffer;
  (void)null_buffer;
  (void)data_buffer_size;
  (void)null_buffer_size;
  return 0;
}

static int
table_def_get_buf_offset(IC_TABLE_DEF *table_def,
                         guint32 field_id,
                         guint32 *offset,
                         guint32 *null_bit_offset)
{
  (void)table_def;
  (void)field_id;
  (void)offset;
  (void)null_bit_offset;
  return 0;
}

static IC_TABLE_DEF_OPS glob_table_def_ops=
{
  .ic_get_table_id             = table_def_get_table_id,
  .ic_get_field_id             = table_def_get_field_id,
  .ic_get_field_name           = table_def_get_field_name,
  .ic_get_field_type           = table_def_get_field_type,
  .ic_get_field_len            = table_def_get_field_len,
  .ic_get_buf                  = table_def_get_buf,
  .ic_get_buf_offset       = table_def_get_buf_offset
};

static int
index_def_get_index_id(IC_INDEX_DEF *index_def,
                       guint32 *index_id)
{
  (void)index_def;
  (void)index_id;
  return 0;
}

static int
index_def_get_table_id(IC_INDEX_DEF *index_def,
                       guint32 *table_id)
{
  (void)index_def;
  (void)table_id;
  return 0;
}

static int
index_def_get_num_key_fields(IC_INDEX_DEF *index_def,
                             guint32 *num_key_fields)
{
  (void)index_def;
  (void)num_key_fields;
  return 0;
}

static int
index_def_get_key_field_id(IC_INDEX_DEF *index_def,
                           guint32 key_field_id_order,
                           guint32 *field_id)
{
  (void)index_def;
  (void)key_field_id_order;
  (void)field_id;
  return 0;
}

static IC_INDEX_DEF_OPS glob_index_def_ops=
{
  .ic_get_index_id           = index_def_get_index_id,
  .ic_get_table_id           = index_def_get_table_id,
  .ic_get_num_key_fields     = index_def_get_num_key_fields,
  .ic_get_key_field_id       = index_def_get_key_field_id
};


static int
at_add_field(IC_ALTER_TABLE *alter_table,
             const gchar *field_name,
             IC_FIELD_TYPE field_type,
             guint32 field_size,
             gboolean is_nullable,
             gboolean is_disk_stored)
{
  (void)alter_table;
  (void)field_name;
  (void)field_type;
  (void)field_size;
  (void)is_nullable;
  (void)is_disk_stored;
  return 0;
}

static int
at_set_charset(IC_ALTER_TABLE *alter_table,
               const gchar *field_name,
               guint32 cs_id)
{
  (void)alter_table;
  (void)field_name;
  (void)cs_id;
  return 0;
}

static int
at_set_decimal_field(IC_ALTER_TABLE *alter_table,
                     const gchar *field_name,
                     guint32 scale,
                     guint32 precision)
{
  (void)alter_table;
  (void)field_name;
  (void)scale;
  (void)precision;
  return 0;
}

static int
at_drop_field(IC_ALTER_TABLE *alter_table,
              const gchar *field_name)
{
  (void)alter_table;
  (void)field_name;
  return 0;
}

static int
at_add_index(IC_ALTER_TABLE *alter_table,
             const gchar *index_name,
             const gchar **field_names,
             guint32 num_fields,
             IC_INDEX_TYPE index_type,
             gboolean is_null_values_in_index_allowed)
{
  (void)alter_table;
  (void)index_name;
  (void)field_names;
  (void)num_fields;
  (void)index_type;
  (void)is_null_values_in_index_allowed;
  return 0;
}

static int
at_drop_index(IC_ALTER_TABLE *alter_table,
              const gchar *index_name)
{
  (void)alter_table;
  (void)index_name;
  return 0;
}

static int
at_define_partitioning(IC_ALTER_TABLE *alter_table,
                       IC_PARTITION_TYPE partition_type,
                       const gchar **field_names,
                       guint32 num_fields,
                       const gchar **partition_names,
                       guint32 *map_partition_to_nodegroup,
                       const gchar **map_partition_to_tablespace,
                       guint32 num_partitions)
{
  (void)alter_table;
  (void)partition_type;
  (void)field_names;
  (void)num_fields;
  (void)partition_names;
  (void)map_partition_to_nodegroup;
  (void)map_partition_to_tablespace;
  (void)num_partitions;
  return 0;
}

static int
at_create_table(IC_ALTER_TABLE *alter_table,
                const gchar *table_name,
                const gchar *db_name,
                const gchar *schema_name,
                const gchar *tablespace_name)
{
  (void)alter_table;
  (void)table_name;
  (void)db_name;
  (void)schema_name;
  (void)tablespace_name;
  return 0;
}

static int
at_drop_table(IC_ALTER_TABLE *alter_table,
              const gchar *table_name,
              const gchar *db_name,
              const gchar *schema_name)
{
  (void)alter_table;
  (void)table_name;
  (void)db_name;
  (void)schema_name;
  return 0;
}

static int
at_alter_table(IC_ALTER_TABLE *alter_table,
               const gchar *table_name,
               const gchar *db_name,
               const gchar *schema_name)
{
  (void)alter_table;
  (void)table_name;
  (void)db_name;
  (void)schema_name;
  return 0;
}

static int
at_rename_table(IC_ALTER_TABLE *alter_table,
                const gchar *old_table_name,
                const gchar *old_db_name,
                const gchar *old_schema_name,
                const gchar *new_table_name,
                const gchar *new_db_name,
                const gchar *new_schema_name)
{
  (void)alter_table;
  (void)old_table_name;
  (void)old_db_name;
  (void)old_schema_name;
  (void)new_table_name;
  (void)new_db_name;
  (void)new_schema_name;
  return 0;
}

static IC_ALTER_TABLE_OPS glob_alter_table_ops=
{
  .ic_add_field              = at_add_field,
  .ic_set_charset            = at_set_charset,
  .ic_set_decimal_field      = at_set_decimal_field,
  .ic_drop_field             = at_drop_field,
  .ic_add_index              = at_add_index,
  .ic_drop_index             = at_drop_index,
  .ic_define_partitioning    = at_define_partitioning,
  .ic_create_table           = at_create_table,
  .ic_drop_table             = at_drop_table,
  .ic_alter_table            = at_alter_table,
  .ic_rename_table           = at_rename_table
};

static int
mdt_create_metadata_op(IC_METADATA_TRANSACTION *md_trans,
                       IC_ALTER_TABLE **alter_table)
{
  (void)md_trans;
  (void)alter_table;
  return 0;
}

static int
mdt_create_tablespace_op(IC_METADATA_TRANSACTION *md_trans,
                         IC_ALTER_TABLESPACE **alter_ts)
{
  (void)md_trans;
  (void)alter_ts;
  return 0;
}

static int
mdt_md_commit(IC_METADATA_TRANSACTION *md_trans)
{
  (void)md_trans;
  return 0;
}

static int
mdt_free_md_trans(IC_METADATA_TRANSACTION *md_trans)
{
  (void)md_trans;
  return 0;
}

static IC_METADATA_TRANSACTION_OPS glob_metadata_transaction_ops=
{
  .ic_create_metadata_op     = mdt_create_metadata_op,
  .ic_create_tablespace_op   = mdt_create_tablespace_op,
  .ic_md_commit              = mdt_md_commit,
  .ic_free_md_trans          = mdt_free_md_trans
};
