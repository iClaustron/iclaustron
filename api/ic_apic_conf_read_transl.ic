/* Copyright (C) 2009, 2015 iClaustron AB

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 of the License.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */

/*
  MODULE: Configuration reader client, Translate Part
  ---------------------------------------------------
 * This module implements one method which is used as part of the client
 * retrieving the cluster configuration from a cluster server. This
 * method is called immediately after reading all the lines of the base64
 * encoded strings sent to describe the cluster configuration.
 *
 * Method:
 * translate_config
 *
 * Most of the work is performed in the method analyse_key_value after
 * translating the base64-encoded string into an array of 32-bit values,
 * mostly consisting of key-value pairs.
 *
 * The work in analyse_key_value is performed in two phases. The key-value
 * pair array is traversed twice. The first traversal records the number
 * of nodes, the number of communication sections and some other things
 * needed to calculate the memory requirements for allocating the data
 * structures for the cluster configuration.
 *
 * The methods to support in these length calculations are:
 *   analyse_node_section_phase1: Analyse a node section to find node type
 *   step_key_value: Step through key values ignoring values
 *
 * The memory allocations are done in two routines:
 *   allocate_mem_phase1
 *   allocate_mem_phase2
 *
 * In the second phase we have allocated the memory and its now time to fill
 * in the allocated data structures. This is performed by the methods:
 *   assign_system_section: Sets the system section variables
 *   assign_node_section: Sets the node section variables for all node types
 *   assign_comm_section: Sets the communication section variables
 *
 * These methods have a few support methods:
 *   assign_config_value_int: Assign an integer value of various sizes
 *   assign_config_value_charptr: Assign a string value
 *
 * The final step is to rearrange the node arrays which will be addressed
 * through their node ids instead of an index of the order they appear.
 * This is performed by the method:
 *   arrange_node_arrays
 *
 *  Finally a few support methods are used in the module:
 *  get_conf_entry: To quickly find a configuration entry using a key
 *  update_string_data: Update string data in configuration variable
 *  get_64bit_value: Get 64 bit value from key-value pairs
 *  key_type_error: Report an error on key-value pairs
 */
static gchar ver_string[8]= { 0x4E, 0x44, 0x42, 0x43, 0x4F, 0x4E, 0x46, 0x32 };
static int
analyse_key_value(guint32 *key_value, guint32 len,
                  IC_INT_API_CONFIG_SERVER *apic,
                  guint32 cluster_id);
static int
analyse_node_section_phase1(IC_CLUSTER_CONFIG *conf_obj,
                            IC_INT_API_CONFIG_SERVER *apic,
                            guint32 node_index, guint32 value,
                            guint32 hash_key);
static int
step_key_value(IC_INT_API_CONFIG_SERVER *apic,
               guint32 key_type, guint32 **key_value,
               guint32 value, guint32 *key_value_end);
static int allocate_mem_phase1(IC_CLUSTER_CONFIG *conf_obj);
static int
allocate_mem_phase2(IC_INT_API_CONFIG_SERVER *apic,
                    IC_CLUSTER_CONFIG *conf_obj);
static int
assign_system_section(IC_CLUSTER_CONFIG *conf_obj,
                      IC_INT_API_CONFIG_SERVER *apic,
                      guint32 key_type,
                      guint32 **key_value,
                      guint32 value,
                      guint32 hash_key);
static int
assign_node_section(IC_CLUSTER_CONFIG *conf_obj,
                    IC_INT_API_CONFIG_SERVER *apic,
                    guint32 key_type, guint32 **key_value,
                    guint32 value, guint32 hash_key,
                    guint32 node_sect_id);
static int
assign_comm_section(IC_CLUSTER_CONFIG *conf_obj,
                    IC_INT_API_CONFIG_SERVER *apic,
                    guint32 key_type, guint32 **key_value,
                    guint32 value, guint32 hash_key,
                    guint32 comm_sect_id);
static int
arrange_node_arrays(IC_INT_API_CONFIG_SERVER *apic,
                    IC_CLUSTER_CONFIG *conf_obj);
static int
assign_config_value_int(IC_INT_API_CONFIG_SERVER *apic,
                        IC_CONFIG_ENTRY *conf_entry, guint64 value,
                        IC_CONFIG_TYPES conf_type,
                        int data_type,
                        gchar *struct_ptr);
static int
assign_config_string(IC_INT_API_CONFIG_SERVER *apic,
                     IC_CONFIG_ENTRY *conf_entry,
                     IC_CONFIG_TYPES conf_type,
                     gchar *string_memory,
                     guint32 string_len,
                     gchar *struct_ptr,
                     gchar **string_val);
static int
assign_config_value(IC_CONFIG_ENTRY *conf_entry,
                    IC_INT_API_CONFIG_SERVER *apic,
                    IC_CONFIG_TYPES conf_type,
                    guint32 key_type,
                    gchar *struct_ptr,
                    guint32 value,
                    gchar **key_value,
                    guint32 hash_key);

static IC_CONFIG_ENTRY* get_conf_entry(guint32 hash_key);
static void
update_string_data(IC_INT_API_CONFIG_SERVER *apic,
                   guint32 value,
                   guint32 **key_value);
static guint64 get_64bit_value(guint32 value, guint32 **key_value);
static int
key_type_error(IC_INT_API_CONFIG_SERVER *apic,
               guint32 hash_key,
               guint32 node_type);
/* Here is the source code for this module */
static int
translate_config(IC_INT_API_CONFIG_SERVER *apic,
                 guint32 cluster_id,
                 gchar *config_buf,
                 guint32 config_size)
{
  gchar *bin_buf;
  guint32 bin_config_size, bin_config_size32, checksum, i;
  guint32 *bin_buf32, *key_value_ptr, key_value_len;
  int ret_code;
  DEBUG_ENTRY("translate_config");

  ic_assert((config_size & 3) == 0);
  bin_config_size= (config_size >> 2) * 3;
  /*
    This memory allocation is temporary allocation simply because size is
    variable and can be larger than stack.
  */
  if (!(bin_buf= ic_calloc(bin_config_size)))
  {
    DEBUG_RETURN_INT(IC_ERROR_MEM_ALLOC);
  }
  if ((ret_code= ic_base64_decode((guint8*)bin_buf,
                                  &bin_config_size,
                                  (const guint8*)config_buf,
                                  config_size)))
  {
    DEBUG_PRINT(CONFIG_LEVEL,
      ("1:Protocol error in base64 decode"));
    PROTOCOL_CHECK_GOTO(FALSE);
  }
  bin_config_size32= bin_config_size >> 2;
  if ((bin_config_size & 3) != 0 || bin_config_size32 <= 3)
  {
    DEBUG_PRINT(CONFIG_LEVEL,
      ("2:Protocol error in base64 decode"));
    PROTOCOL_CHECK_GOTO(FALSE);
  }
  if (memcmp(bin_buf, ver_string, 8))
  {
    DEBUG_PRINT(CONFIG_LEVEL,
      ("3:Protocol error in base64 decode"));
    PROTOCOL_CHECK_GOTO(FALSE);
  }
  bin_buf32= (guint32*)bin_buf;
  checksum= 0;
  for (i= 0; i < bin_config_size32; i++)
  {
    checksum^= g_ntohl(bin_buf32[i]);
  }
  if (checksum)
  {
    DEBUG_PRINT(CONFIG_LEVEL,
      ("4:Protocol error in base64 decode"));
    PROTOCOL_CHECK_GOTO(FALSE);
  }
  key_value_ptr= bin_buf32 + 2;
  key_value_len= bin_config_size32 - 3;
  if ((ret_code= analyse_key_value(key_value_ptr,
                                   key_value_len,
                                   apic,
                                   cluster_id)))
    goto error;
  ret_code= 0;
  goto end;

error:
end:
  ic_free(bin_buf);
  DEBUG_RETURN_INT(ret_code);
}

static int
analyse_key_value(guint32 *key_value, guint32 len,
                  IC_INT_API_CONFIG_SERVER *apic,
                  guint32 cluster_id)
{
  guint32 *key_value_start= key_value;
  guint32 *key_value_end= key_value + len;
  IC_CLUSTER_CONFIG *conf_obj;
  gboolean first= TRUE;
  gboolean first_data_server= TRUE;
  int ret_code;
  guint32 pass, expected_sect_id;
  guint32 system_section= 0;
  guint32 first_comm_section= 0;
  guint32 first_data_server_section= 0;
  guint32 num_apis= 0;
  guint32 node_section, node_index;
  DEBUG_ENTRY("analyse_key_value");

  for (guint32 i = 0; i < len; i++)
  {
    ic_printf("key[%u] = 0x%x", i, g_ntohl(key_value[i]));
  }
  conf_obj= apic->conf_objects[cluster_id];
  conf_obj->num_nodes= 0;
  for (pass= 0; pass < 2; pass++)
  {
    if (pass == 1)
    {
      if ((ret_code= allocate_mem_phase2(apic, conf_obj)))
        goto error;
    }
    key_value= key_value_start;
    expected_sect_id= 0;
    while (key_value < key_value_end)
    {
      guint32 key= g_ntohl(key_value[0]);
      guint32 value= g_ntohl(key_value[1]);
      guint32 hash_key= key & IC_CL_KEY_MASK;
      guint32 sect_id= (key >> IC_CL_SECT_SHIFT) & IC_CL_SECT_MASK;
      guint32 key_type= key >> IC_CL_KEY_SHIFT;
      DEBUG_PRINT(CONFIG_LEVEL,
      ("Section: %u, Config id: %u, Type: %u, value: %u",
       sect_id,
       hash_key,
       key_type,
       value));
      if (sect_id != expected_sect_id)
      {
        expected_sect_id++;
        PROTOCOL_CHECK_GOTO(sect_id == expected_sect_id);
      }
      if (pass == 0)
      {
        if (sect_id == 0)
        {
          if (hash_key == 1000)
          {
            /* Verify we have at least one cluster server and an api node */
            system_section= (value >> IC_CL_SECT_SHIFT);
            num_apis= system_section - 2;
            PROTOCOL_CHECK_GOTO(system_section >= 4);
          }
          else if (hash_key == 2000)
          {
            PROTOCOL_CHECK_GOTO(value == 16384);
          }
          else if (hash_key == 3000)
          {
            first_comm_section= (value >> IC_CL_SECT_SHIFT) + 1;
            PROTOCOL_CHECK_GOTO((system_section + 3) == first_comm_section);
          }
        } else if (sect_id == 1)
        {
          PROTOCOL_CHECK_GOTO(first_comm_section != 0);
          PROTOCOL_CHECK_GOTO(num_apis > 0);
          node_section= (value >> IC_CL_SECT_SHIFT);
          if (node_section >= first_comm_section && first_data_server)
          {
            first_data_server= FALSE;
            first_data_server_section= node_section;
            conf_obj->num_comms= first_data_server_section -
                                 first_comm_section;
          }
          conf_obj->num_nodes++;
        }
        else if (sect_id == 2 && first)
        {
          /* Verify we have at least one data server node */
          PROTOCOL_CHECK_GOTO(!first_data_server);
          first= FALSE;
          DEBUG_PRINT(CONFIG_LEVEL,
            ("num_nodes = %u, num_comms = %u, garbage section = %u",
            conf_obj->num_nodes, conf_obj->num_comms, system_section));
          DEBUG_PRINT(CONFIG_LEVEL,
            ("first comm = %u, first data server = %u",
            first_comm_section, first_data_server_section));
          if ((ret_code= allocate_mem_phase1(conf_obj)))
            goto error;

        }
        if (sect_id >= 2)
        {
          if (sect_id < system_section)
          {
            node_index= sect_id - 2;
            if ((ret_code= analyse_node_section_phase1(conf_obj,
                                                       apic,
                                                       node_index,
                                                       value,
                                                       hash_key)))
              goto error;
          }
          else if (sect_id >= first_data_server_section)
          {
            node_index= num_apis + (sect_id - first_data_server_section);
            if ((ret_code= analyse_node_section_phase1(conf_obj,
                                                       apic,
                                                       node_index,
                                                       value,
                                                       hash_key)))
              goto error;
          }
        }
      }
      key_value+= 2;
      if (pass == 0)
      {
        if ((ret_code= step_key_value(apic,
                                      key_type,
                                      &key_value,
                                      value,
                                      key_value_end)))
          goto error;
      }
      else /* Pass == 1 */
      {
        guint32 node_sect_id;
        if (sect_id == 0)
        {
          /* Initial section */
          PROTOCOL_CHECK_GOTO(
            (hash_key == 1000 &&
              (value == (system_section << IC_CL_SECT_SHIFT))) ||
            (hash_key == 2000 && (1 << IC_CL_SECT_SHIFT)) ||
            (hash_key == 3000 &&
              (value == ((system_section + 2) << IC_CL_SECT_SHIFT))));
          PROTOCOL_CHECK_GOTO(key_type == IC_CL_SECT_TYPE);
        }
        else if (sect_id == 1)
        {
          /* Node meta section */
          PROTOCOL_CHECK_GOTO(key_type == IC_CL_INT32_TYPE);
          PROTOCOL_CHECK_GOTO(hash_key < conf_obj->num_nodes);
          if (hash_key < num_apis)
          {
            PROTOCOL_CHECK_GOTO(value ==
                                ((2 + hash_key) << IC_CL_SECT_SHIFT));
          } else {
            PROTOCOL_CHECK_GOTO(value ==
              (((hash_key - num_apis) + first_data_server_section)
                  << IC_CL_SECT_SHIFT));
          }
        }
        else if (sect_id >= 2 && sect_id < system_section)
        {
          /* API node sections */
          node_sect_id= sect_id - 2;
          if ((ret_code= assign_node_section(conf_obj,
                                             apic,
                                             key_type,
                                             &key_value,
                                             value,
                                             hash_key,
                                             node_sect_id)))
            goto error;
        }
        else if (sect_id == system_section)
        {
          /* System meta section */
          PROTOCOL_CHECK_GOTO(hash_key == 0 &&
                              key_type == IC_CL_INT32_TYPE &&
               value == ((system_section + 1) << IC_CL_SECT_SHIFT));
        }
        else if (sect_id == (system_section + 1))
        {
          /*
             This is the system section where we currently define name,
             primary cluster server and system configuration number
          */
          if ((ret_code= assign_system_section(conf_obj,
                                               apic,
                                               key_type,
                                               &key_value,
                                               value,
                                               hash_key)))
            goto error;
        }
        else if (sect_id == (system_section + 2))
        {
          /*
             This is the communication meta section. In communication
             to iClaustron this section can be ignored.
           */
          PROTOCOL_CHECK_GOTO(key_type == IC_CL_INT32_TYPE &&
                              hash_key < conf_obj->num_comms &&
                              (first_comm_section + hash_key) ==
                                (value >> IC_CL_SECT_SHIFT));
        }
        else if (sect_id < first_data_server_section)
        {
          /* Communication sections */
          guint32 comm_sect_id= sect_id - first_comm_section;
          if ((ret_code= assign_comm_section(conf_obj,
                                             apic,
                                             key_type,
                                             &key_value,
                                             value,
                                             hash_key,
                                             comm_sect_id)))
            goto error;
        }
        else
        {
          /* Data Server node sections */
          node_sect_id= num_apis + (sect_id - first_data_server_section);
          PROTOCOL_CHECK_GOTO(node_sect_id < conf_obj->num_nodes);
          if ((ret_code= assign_node_section(conf_obj,
                                             apic,
                                             key_type,
                                             &key_value,
                                             value,
                                             hash_key,
                                             node_sect_id)))
            goto error;
        }
      }
    }
  }
  if ((ret_code= arrange_node_arrays(apic, conf_obj)))
    goto error;
  DEBUG_RETURN_INT(0);
error:
  if (!first)
  {
    if (conf_obj->node_types)
    {
      ic_free(conf_obj->node_types);
    }
    if (conf_obj->node_ids)
    {
      ic_free(conf_obj->node_ids);
    }
    if (conf_obj->node_config)
    {
      ic_free(conf_obj->node_config);
    }
    conf_obj->node_types= NULL;
    conf_obj->node_ids= NULL;
    conf_obj->node_config= NULL;
  }
  DEBUG_RETURN_INT(ret_code);
}

static int
analyse_node_section_phase1(IC_CLUSTER_CONFIG *conf_obj,
                            IC_INT_API_CONFIG_SERVER *apic,
                            guint32 node_index,
                            guint32 value,
                            guint32 hash_key)
{
  DEBUG_ENTRY("analyse_node_section_phase1");

  if (hash_key == IC_NODE_TYPE)
  {
    DEBUG_PRINT(CONFIG_LEVEL,
                ("Node type of index %u is %u", node_index, value));
    /* Value communicated starts at 0, our internal type starts at 1 */
    value++;
    switch (value)
    {
      case IC_DATA_SERVER_NODE:
        conf_obj->num_data_servers++; break;
      case IC_CLIENT_NODE:
        conf_obj->num_clients++; break;
      case IC_CLUSTER_SERVER_NODE:
        conf_obj->num_cluster_servers++; break;
      case IC_SQL_SERVER_NODE:
        conf_obj->num_sql_servers++; break;
      case IC_REP_SERVER_NODE:
        conf_obj->num_rep_servers++; break;
      case IC_FILE_SERVER_NODE:
        conf_obj->num_file_servers++; break;
      case IC_RESTORE_NODE:
        conf_obj->num_restore_nodes++; break;
      case IC_CLUSTER_MANAGER_NODE:
        conf_obj->num_cluster_mgrs++; break;
      default:
        DEBUG_PRINT(CONFIG_LEVEL, ("No such node type"));
        PROTOCOL_CHECK_DEBUG_RETURN(FALSE);
    }
    conf_obj->node_types[node_index]= (IC_NODE_TYPES)value;
  }
  else if (hash_key == IC_NODE_ID)
  {
    conf_obj->node_ids[node_index]= value;
    conf_obj->max_node_id= MAX(value, conf_obj->max_node_id);
    DEBUG_PRINT(CONFIG_LEVEL,
                ("Node id = %u for index %u", value, node_index));
  }
  DEBUG_RETURN_INT(0);
}

static int
step_key_value(IC_INT_API_CONFIG_SERVER *apic,
               guint32 key_type,
               guint32 **key_value,
               guint32 value,
               guint32 *key_value_end)
{
  guint32 len_words;
  switch (key_type)
  {
    case IC_CL_INT32_TYPE:
      break;
    case IC_CL_SECT_TYPE:
      break;
    case IC_CL_INT64_TYPE:
      (*key_value)++;
      break;
    case IC_CL_CHAR_TYPE:
    {
      len_words= (value + 3)/4;
      if (((*key_value) + len_words) >= key_value_end)
      {
        DEBUG_PRINT(CONFIG_LEVEL, ("Array ended in the middle of a type"));
        PROTOCOL_CHECK_RETURN(FALSE);
      }
      if (value != (strlen((gchar*)(*key_value)) + 1))
      {
        DEBUG_PRINT(CONFIG_LEVEL, ("Wrong length of character type"));
        PROTOCOL_CHECK_RETURN(FALSE);
      }
      (*key_value)+= len_words;
      apic->temp->string_memory_size+= value;
      break;
   }
   default:
     return key_type_error(apic, key_type, 32);
  }
  return 0;
}

static int
allocate_mem_phase1(IC_CLUSTER_CONFIG *conf_obj)
{
  /*
    Allocate memory for pointer arrays pointing to the configurations of the
    nodes in the cluster, also allocate memory for array of node types.
    This memory is only temporary allocated for the analysis of the
    configuration data.
  */
  conf_obj->node_types= (IC_NODE_TYPES*)ic_calloc(conf_obj->num_nodes *
                                                  sizeof(IC_NODE_TYPES));
  conf_obj->node_ids= (guint32*)ic_calloc(conf_obj->num_nodes *
                                          sizeof(guint32));
  conf_obj->node_config= (gchar**)ic_calloc(conf_obj->num_nodes *
                                            sizeof(gchar*));
  if (!conf_obj->node_types || !conf_obj->node_ids ||
      !conf_obj->node_config)
  {
    return IC_ERROR_MEM_ALLOC;
  }
  return 0;
}


static int
allocate_mem_phase2(IC_INT_API_CONFIG_SERVER *apic, IC_CLUSTER_CONFIG *conf_obj)
{
  guint32 i, size_struct;
  guint32 size_config_objects= 0;
  gchar *conf_obj_ptr, *string_mem;
  IC_MEMORY_CONTAINER *mc_ptr= apic->mc_ptr;
  DEBUG_ENTRY("allocate_mem_phase2");

  /*
    Allocate memory for the actual configuration objects for nodes and
    communication sections.
  */
  for (i= 0; i < conf_obj->num_nodes; i++)
  {
    switch (conf_obj->node_types[i])
    {
      case IC_DATA_SERVER_NODE:
        size_config_objects+= sizeof(IC_DATA_SERVER_CONFIG);
        break;
      case IC_CLIENT_NODE:
        size_config_objects+= sizeof(IC_CLIENT_CONFIG);
        break;
      case IC_CLUSTER_SERVER_NODE:
        size_config_objects+= sizeof(IC_CLUSTER_SERVER_CONFIG);
        break;
      case IC_SQL_SERVER_NODE:
        size_config_objects+= sizeof(IC_SQL_SERVER_CONFIG);
        break;
      case IC_REP_SERVER_NODE:
        size_config_objects+= sizeof(IC_REP_SERVER_CONFIG);
        break;
      case IC_FILE_SERVER_NODE:
        size_config_objects+= sizeof(IC_FILE_SERVER_CONFIG);
        break;
      case IC_RESTORE_NODE:
        size_config_objects+= sizeof(IC_RESTORE_CONFIG);
        break;
      case IC_CLUSTER_MANAGER_NODE:
        size_config_objects+= sizeof(IC_CLUSTER_MANAGER_CONFIG);
        break;
      default:
        ic_assert(FALSE);
        break;
    }
  }
  size_config_objects+= conf_obj->num_comms *
                        sizeof(struct ic_comm_link_config);
  if (!(conf_obj->comm_config= (gchar**)
      mc_ptr->mc_ops.ic_mc_calloc(mc_ptr,
                     conf_obj->num_comms * sizeof(gchar*))) ||
      !(string_mem= 
      mc_ptr->mc_ops.ic_mc_calloc(mc_ptr,
                     apic->temp->string_memory_size)) ||
      !(apic->temp->config_memory_to_return= 
      mc_ptr->mc_ops.ic_mc_calloc(mc_ptr,
                     size_config_objects)))
  {
    DEBUG_RETURN_INT(IC_ERROR_MEM_ALLOC);
  }

  conf_obj_ptr= apic->temp->config_memory_to_return;
  apic->temp->end_string_memory= string_mem + apic->temp->string_memory_size;
  apic->temp->next_string_memory= string_mem;

  for (i= 0; i < conf_obj->num_nodes; i++)
  {
    conf_obj->node_config[i]= conf_obj_ptr;
    DEBUG_PRINT(CONFIG_LEVEL, ("node_config[%u]: 0x%llX", i, conf_obj_ptr));
    size_struct= 0;
    switch (conf_obj->node_types[i])
    {
      case IC_DATA_SERVER_NODE:
        size_struct= sizeof(IC_DATA_SERVER_CONFIG);
        break;
      case IC_CLIENT_NODE:
        size_struct= sizeof(IC_CLIENT_CONFIG);
        break;
      case IC_CLUSTER_SERVER_NODE:
        size_struct= sizeof(IC_CLUSTER_SERVER_CONFIG);
        break;
      case IC_SQL_SERVER_NODE:
        size_struct= sizeof(IC_SQL_SERVER_CONFIG);
        break;
      case IC_REP_SERVER_NODE:
        size_struct= sizeof(IC_REP_SERVER_CONFIG);
        break;
      case IC_FILE_SERVER_NODE:
        size_struct= sizeof(IC_FILE_SERVER_CONFIG);
        break;
      case IC_RESTORE_NODE:
        size_struct= sizeof(IC_RESTORE_CONFIG);
        break;
      case IC_CLUSTER_MANAGER_NODE:
        size_struct= sizeof(IC_CLUSTER_MANAGER_CONFIG);
        break;
      default:
        ic_assert(FALSE);
        break;
    }
    init_config_object(conf_obj_ptr, size_struct,
                       (IC_CONFIG_TYPES)conf_obj->node_types[i]);
    conf_obj_ptr+= size_struct;
  }
  for (i= 0; i < conf_obj->num_comms; i++)
  {
    init_config_object(conf_obj_ptr, sizeof(IC_COMM_LINK_CONFIG),
                       IC_COMM_TYPE);
    conf_obj->comm_config[i]= conf_obj_ptr;
    conf_obj_ptr+= sizeof(IC_COMM_LINK_CONFIG);
  }
  ic_assert(conf_obj_ptr == (apic->temp->config_memory_to_return +
                            size_config_objects));
  DEBUG_RETURN_INT(0);
}

static int
assign_system_section(IC_CLUSTER_CONFIG *clu_conf,
                      IC_INT_API_CONFIG_SERVER *apic,
                      guint32 key_type,
                      guint32 **key_value,
                      guint32 value,
                      guint32 hash_key)
{
  IC_CONFIG_ENTRY *conf_entry;
  IC_SYSTEM_CONFIG *sys_conf;
  DEBUG_ENTRY("assign_system_section");

  if (hash_key == IC_PARENT_ID || hash_key == IC_NODE_TYPE)
    DEBUG_RETURN_INT(0); /* Ignore */
  /*
    We have stored the system entries as 1001, 1002 and so forth
    although in the protocol they are 1,2 and so forth. This is
    to ensure that entries in the configuration entry hash are
    unique.
  */
  if (!(conf_entry= get_conf_entry(hash_key + SYSTEM_SECTION_ADJUSTMENT)))
  {
    PROTOCOL_CHECK_DEBUG_RETURN(FALSE);
  }
  if (conf_entry->is_deprecated || conf_entry->is_not_configurable)
    DEBUG_RETURN_INT(0); /* Ignore */
  sys_conf= &clu_conf->sys_conf;
  DEBUG_RETURN_INT(assign_config_value(conf_entry,
                                       apic,
                                       IC_SYSTEM_TYPE,
                                       key_type,
                                       (gchar*)sys_conf,
                                       value,
                                       (gchar**)key_value,
                                       hash_key));
}

static int
assign_node_section(IC_CLUSTER_CONFIG *conf_obj,
                    IC_INT_API_CONFIG_SERVER *apic,
                    guint32 key_type,
                    guint32 **key_value,
                    guint32 value,
                    guint32 hash_key,
                    guint32 node_sect_id)
{
  IC_CONFIG_ENTRY *conf_entry;
  gchar *node_config;
  IC_NODE_TYPES node_type;
  DEBUG_ENTRY("assign_node_section");

  if (hash_key == IC_PARENT_ID ||
      hash_key == IC_NODE_TYPE ||
      hash_key == IC_NODE_ID)
  {
    DEBUG_RETURN_INT(0); /* Ignore for now */
  }
  if (!(conf_entry= get_conf_entry(hash_key)))
  {
    PROTOCOL_CHECK_DEBUG_RETURN(FALSE);
  }
  if (conf_entry->is_deprecated || conf_entry->is_not_configurable)
  {
    DEBUG_RETURN_INT(0); /* Ignore */
  }
  if (node_sect_id >= conf_obj->num_nodes)
  {
    DEBUG_PRINT(CONFIG_LEVEL, ("node_sect_id out of range"));
    PROTOCOL_CHECK_DEBUG_RETURN(FALSE);
  }
  if (!(node_config= (gchar*)conf_obj->node_config[node_sect_id]))
  {
    DEBUG_PRINT(CONFIG_LEVEL, ("No such node_config object"));
    PROTOCOL_CHECK_DEBUG_RETURN(FALSE);
  }
  node_type= conf_obj->node_types[node_sect_id];
  DEBUG_RETURN_INT(assign_config_value(conf_entry,
                                       apic,
                                       (IC_CONFIG_TYPES)node_type,
                                       key_type,
                                       node_config,
                                       value,
                                       (gchar**)key_value,
                                       hash_key));
}

static int
assign_comm_section(IC_CLUSTER_CONFIG *conf_obj,
                    IC_INT_API_CONFIG_SERVER *apic,
                    guint32 key_type, guint32 **key_value,
                    guint32 value, guint32 hash_key,
                    guint32 comm_sect_id)
{
  IC_CONFIG_ENTRY *conf_entry;
  IC_SOCKET_LINK_CONFIG *socket_conf;
  DEBUG_ENTRY("assign_comm_section");

  if (hash_key == IC_PARENT_ID || hash_key == IC_NODE_TYPE)
  {
    DEBUG_RETURN_INT(0); /* Ignore */
  }
  if (!(conf_entry= get_conf_entry(hash_key)))
  {
    PROTOCOL_CHECK_DEBUG_RETURN(FALSE);
  }
  if (conf_entry->is_deprecated || conf_entry->is_not_configurable)
  {
    DEBUG_RETURN_INT(0); /* Ignore */
  }
  ic_assert(comm_sect_id < conf_obj->num_comms);
  socket_conf= (IC_SOCKET_LINK_CONFIG*)conf_obj->comm_config[comm_sect_id];
  DEBUG_RETURN_INT(assign_config_value(conf_entry,
                                       apic,
                                       IC_COMM_TYPE,
                                       key_type,
                                       (gchar*)socket_conf,
                                       value,
                                       (gchar**)key_value,
                                       hash_key));
}

static int
arrange_node_arrays(IC_INT_API_CONFIG_SERVER *apic,
                    IC_CLUSTER_CONFIG *conf_obj)
{
  gchar **new_node_config;
  IC_NODE_TYPES *new_node_types;
  guint32 i, node_id;
  int ret_code;
  IC_MEMORY_CONTAINER *mc_ptr= apic->mc_ptr;
  IC_DATA_SERVER_CONFIG *ds_conf;
  DEBUG_ENTRY("arrange_node_arrays");

  new_node_types= (IC_NODE_TYPES*)
    mc_ptr->mc_ops.ic_mc_calloc(mc_ptr, (conf_obj->max_node_id + 1) *
                                        sizeof(guint32));
  new_node_config= (gchar**)
    mc_ptr->mc_ops.ic_mc_calloc(mc_ptr, (conf_obj->max_node_id + 1) *
                                        sizeof(gchar*));
  if (!new_node_types || !new_node_config)
  {
    DEBUG_RETURN_INT(IC_ERROR_MEM_ALLOC);
  }

  for (i= 0; i < conf_obj->num_nodes; i++)
  {
    node_id= conf_obj->node_ids[i];
    if (!node_id)
      continue;
    new_node_types[node_id]= conf_obj->node_types[i];
    new_node_config[node_id]= conf_obj->node_config[i];
    ds_conf= (IC_DATA_SERVER_CONFIG*)new_node_config[node_id];
    ds_conf->node_id= node_id;
    if ((ret_code= ensure_node_name_set((void*)ds_conf, mc_ptr)))
    {
      DEBUG_RETURN_INT(ret_code);
    }
  }
  ic_free((gchar*)conf_obj->node_types);
  ic_free((gchar*)conf_obj->node_ids);
  ic_free((gchar*)conf_obj->node_config);
  conf_obj->node_config= new_node_config;
  conf_obj->node_types= new_node_types;
  conf_obj->node_ids= NULL;
  DEBUG_RETURN_INT(0);
}

static int
assign_config_value_int(IC_INT_API_CONFIG_SERVER *apic,
                        IC_CONFIG_ENTRY *conf_entry,
                        guint64 value,
                        IC_CONFIG_TYPES conf_type,
                        int data_type,
                        gchar *struct_ptr)
{
  gchar *char_ptr;
  DEBUG_ENTRY("assign_config_value_int");

  if (conf_entry->is_deprecated || conf_entry->is_not_configurable)
  {
    DEBUG_RETURN_INT(0);
  }
  if (!(conf_entry->config_types & (1 << conf_type)) ||
      (conf_entry->is_boolean && (value > 1)) ||
      (conf_entry->is_min_value_defined &&
       (conf_entry->min_value > value)) ||
      (conf_entry->is_max_value_defined &&
       (conf_entry->max_value < value)))
  {
    if (conf_entry->is_min_value_defined && value < conf_entry->min_value)
    {
      char_ptr= "Value too small";
    }
    else if (conf_entry->is_max_value_defined && value > conf_entry->max_value)
    {
      char_ptr= "Value too large";
    }
    else if (conf_entry->is_boolean && (value > 1))
    {
      char_ptr= "Erroneus bool value";
    }
    else
    {
      char_ptr= NULL;
      DEBUG_PRINT(CONFIG_LEVEL,
        ("Error with node type, config_types = %u, conf_type %u\n",
         conf_entry->config_types, conf_type));
    }
    if (char_ptr)
    {
      DEBUG_PRINT(CONFIG_LEVEL,
        ("Config value error:  %s", char_ptr));
    }
    PROTOCOL_CHECK_DEBUG_RETURN(FALSE);
  }
  struct_ptr+= conf_entry->offset;
  if (data_type == IC_CL_INT32_TYPE)
  {
    if (conf_entry->data_type == IC_UINT32)
    {
      *(guint32*)struct_ptr= (guint32)value;
    }
    else if (conf_entry->data_type == IC_UINT16)
    {
      *(guint16*)struct_ptr= (guint16)value;
    }
    else if (conf_entry->data_type == IC_CHAR ||
             conf_entry->data_type == IC_BOOLEAN)
    {
      *(guint8*)struct_ptr= (guint8)value;
    }
    else
    {
      PROTOCOL_CHECK_DEBUG_RETURN(FALSE);
    }
    DEBUG_RETURN_INT(0);
  }
  else if (data_type == IC_CL_INT64_TYPE)
  {
    if (conf_entry->data_type == IC_UINT64)
    {
      *(guint64*)struct_ptr= (guint64)value;
    }
    else
    {
      PROTOCOL_CHECK_DEBUG_RETURN(FALSE);
    }
    DEBUG_RETURN_INT(0);
  }
  ic_assert(FALSE);
  DEBUG_RETURN_INT(0);
}

static int
assign_config_string(IC_INT_API_CONFIG_SERVER *apic,
                     IC_CONFIG_ENTRY *conf_entry,
                     IC_CONFIG_TYPES conf_type,
                     gchar *string_memory,
                     guint32 string_len,
                     gchar *struct_ptr,
                     gchar **string_val)
{
  DEBUG_ENTRY("assign_config_string");

  if (!conf_entry->is_string_type ||
      !(conf_entry->config_types & (1 << conf_type)))
  {
    DEBUG_PRINT(CONFIG_LEVEL,
          ("conf_type = %u, config_types = %u, config_id = %u",
           conf_type, conf_entry->config_types, conf_entry->config_id));
    DEBUG_PRINT(CONFIG_LEVEL, ("Debug string inconsistency"));
    PROTOCOL_CHECK_DEBUG_RETURN(FALSE);
  }
  struct_ptr+= conf_entry->offset;
  *(gchar**)struct_ptr= string_memory;
  memcpy(string_memory, *string_val, string_len);
  DEBUG_PRINT(CONFIG_LEVEL,
    ("String value = %s", string_memory));
  DEBUG_RETURN_INT(0);
}

static int
assign_config_value(IC_CONFIG_ENTRY *conf_entry,
                    IC_INT_API_CONFIG_SERVER *apic,
                    IC_CONFIG_TYPES conf_type,
                    guint32 key_type,
                    gchar *struct_ptr,
                    guint32 value,
                    gchar **key_value,
                    guint32 hash_key)
{
  int ret_code;
  switch (key_type)
  {
    case IC_CL_INT32_TYPE:
    {
      if ((ret_code= assign_config_value_int(apic,
                                             conf_entry,
                                             (guint64)value,
                                             conf_type,
                                             key_type,
                                             struct_ptr)))
      {
        return ret_code;
      }
      break;
    }
    case IC_CL_INT64_TYPE:
    {
      guint64 long_val= get_64bit_value(value, (guint32**)key_value);
      if ((ret_code= assign_config_value_int(apic,
                                             conf_entry,
                                             long_val,
                                             conf_type,
                                             key_type,
                                             struct_ptr)))
      {
        return ret_code;
      }
      break;
    }
    case IC_CL_CHAR_TYPE:
    {
      if ((ret_code= assign_config_string(apic,
                                          conf_entry,
                                          conf_type,
                                          apic->temp->next_string_memory,
                                          value,
                                          struct_ptr,
                                          key_value)))
      {
        return ret_code;
      }
      update_string_data(apic, value, (guint32**)key_value);
      break;
    }
    default:
      return key_type_error(apic, hash_key, conf_type);
  }
  return 0;
}

static IC_CONFIG_ENTRY*
get_conf_entry(guint32 hash_key)
{
  guint32 id;
  IC_CONFIG_ENTRY *conf_entry;

  if (hash_key < MAX_MAP_CONFIG_ID)
  {
    id= map_config_id_to_inx[hash_key];
    if (id < MAX_CONFIG_ID)
    {
      conf_entry= &glob_conf_entry[id];
      if (!conf_entry)
      {
        DEBUG_PRINT(CONFIG_LEVEL,
                    ("No such config entry, id = %u", id));
      }
      return conf_entry;
    }  
  }
  DEBUG_PRINT(CONFIG_LEVEL,
              ("Error in map_config_id_to_inx, hash_key = %u", hash_key));
  return NULL;
}

static void
update_string_data(IC_INT_API_CONFIG_SERVER *apic,
                   guint32 value,
                   guint32 **key_value)
{
  guint32 len_words= (value + 3)/4;
  apic->temp->next_string_memory+= value;
  ic_assert(apic->temp->next_string_memory <= apic->temp->end_string_memory);
  (*key_value)+= len_words;
}


static guint64
get_64bit_value(guint32 value, guint32 **key_value)
{
  guint32 lsb_val= **key_value; /* Most significant part */
  guint64 long_val;

  lsb_val= g_ntohl(lsb_val);
  long_val= lsb_val + (((guint64)value) << 32);
  (*key_value)++;
  DEBUG_PRINT(CONFIG_LEVEL, ("msb_val: %u, lsb_val: %u, 64bit: %llu",
              value, lsb_val, long_val));
  return long_val;
}

static int
key_type_error(IC_INT_API_CONFIG_SERVER *apic,
               guint32 hash_key,
               guint32 node_type)
{
  (void)hash_key;
  (void)node_type;
  DEBUG_PRINT(CONFIG_LEVEL,
    ("Wrong key type %u node type %u", hash_key, node_type));
  PROTOCOL_CHECK_RETURN(FALSE);
}
